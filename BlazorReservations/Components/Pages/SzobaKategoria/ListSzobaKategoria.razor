@page "/szobak/kategoriak"
@inject ISzobaRepository SzobaRepo
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>
    Szobakategóriák
</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-3">
    <div class="me-3">
        <a class="btn btn-primary mb-3 add-btn" href="/szobak/kategoriak/uj">
            <Icon Type="add"/>
            Új kategória
        </a>
        <a class="btn btn-secondary mb-3" href="/szobak">
            <Icon Type="return" />
            Vissza a szobákhoz
        </a>
    </div>

    <div class="d-flex align-items-center">
        <EditForm FormName="FilterKategoriaForm" Model="filter" OnValidSubmit="FilterKategoriak" autocomplete="off" class="d-flex flex-wrap align-items-center gap-3">
            <div class="d-flex align-items-center">
                <label for="nev" class="form-label me-2 mb-0">Megnevezés:</label>
                <InputSelect id="nev" class="form-control form-select" @bind-Value="filter.Id" style="width: 200px">
                    @if (KategoriakAll is not null)
                    {
                        <option value="">Összes kategória</option>
                        @foreach (var kat in KategoriakAll)
                        {
                            <option value="@kat.Id">@kat.Megnevezes</option>
                        }
                    }
                </InputSelect>
            </div>

            <div class="d-flex align-items-center">
                <label for="egysegar" class="form-label me-2 mb-0">Egységár:</label>
                <InputNumber id="egysegar" @bind-Value="filter.EgysegAr" class="form-control" style="width: 150px" />
            </div>

            <button type="submit" class="btn btn-success">
                <Icon Type="filter"/>
                Szűrés
            </button>
        </EditForm>
        <button class="btn btn-secondary m-1" @onclick="ResetFilters">
            Alaphelyzet
        </button>
    </div>
</div>

@if (Kategoriak is null || Kategoriak.Count == 0)
{
    <div class="kat-item">Nincsenek kategóriák.</div>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">ID</th>
                <th scope="col">Megnevezés</th>
                <th scope="col">Egységár (HUF/fő/éjszaka)</th>
                <th scope="col">Műveletek</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var kat in Kategoriak)
            {
                <tr>
                    <th scope="row">@kat.Id</th>
                    <td>@kat.Megnevezes</td>
                    <td>@($"{kat.EgysegAr:n0}")</td>
                    <td>
                        <a href="@($"/szobak/kategoriak/modosit/{kat.Id}")" class="btn btn-secondary">
                            <Icon Type="edit"/>
                        </a>
                        <button type="button" @onclick="() => OpenConfirmPopup(kat)" class="btn btn-danger">
                            <Icon Type="delete"/>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<DeleteConfirmPopup Visible="ShowDeleteConfirmDialog"
                    ItemName="@_itemToDelete.Megnevezes"
                    OnCancel="CancelDeleteKategoria"
                    OnConfirm="() => ConfirmDeleteKategoria(_itemToDelete.Id)" />

@code {
    public List<SzobaKategoria>? Kategoriak;
    public List<SzobaKategoria>? KategoriakAll;
    private bool ShowDeleteConfirmDialog = false;
    private SzobaKategoria _itemToDelete = new();
    private SzobaKategoriaFilter filter = new();

    protected override async Task OnInitializedAsync()
    {
        KategoriakAll = await SzobaRepo.ReadKategoriaAllAsync();
        Kategoriak = new List<SzobaKategoria>(KategoriakAll);
    }

    private void OpenConfirmPopup(SzobaKategoria kategoria)
    {
        _itemToDelete = kategoria;
        ShowDeleteConfirmDialog = true;
    }

    private void CancelDeleteKategoria()
    {
        ShowDeleteConfirmDialog = false;
    }

    private async Task ConfirmDeleteKategoria(int id)
    {
        await SzobaRepo.DeleteKategoriaAsync(id);
        Kategoriak = await SzobaRepo.ReadKategoriaAllAsync();
        ShowDeleteConfirmDialog = false;
        StateHasChanged();
    }

    private async Task FilterKategoriak()
    {
        Kategoriak = await SzobaRepo.ReadKategoriaFiltered(filter);
        StateHasChanged();
    }

    private void ResetFilters()
    {
        if (KategoriakAll is not null)
        {
            filter.Id = null;
            filter.EgysegAr = null;
            Kategoriak = new List<SzobaKategoria>(KategoriakAll);
        }
    }
}
