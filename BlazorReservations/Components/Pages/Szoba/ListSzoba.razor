@page "/szobak"
@inject ISzobaRepository SzobaRepo
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>
    Szobák
</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-3" style="min-width: 1450px">
    <div class="me-3">
        <a class="btn btn-primary mb-3 add-btn" href="/szobak/uj">
            <Icon Type="add" />
            Új szoba
        </a>
        <a class="btn btn-secondary mb-3" href="/szobak/kategoriak">
            Kategóriák kezelése
        </a>
    </div>

    <div class="d-flex align-items-center">
        <EditForm FormName="FilterSzobaForm" Model="filter" OnValidSubmit="FilterSzobak" autocomplete="off" class="d-flex flex-wrap align-items-center gap-3">
            <div class="d-flex align-items-center">
                <label for="szobaszam" class="form-label me-2 mb-0">Szobaszám:</label>
                <InputText id="szobaszam" class="form-control form-text" @bind-Value="filter.SzobaSzam"/>
            </div>

            <div class="d-flex align-items-center">
                <label for="agyakszama" class="form-label me-2 mb-0">Ágyak száma:</label>
                <InputNumber id="agyakszama" @bind-Value="filter.AgyakSzama" class="form-control" style="width: 150px" />
            </div>

            <div class="d-flex align-items-center">
                <label for="kategoria" class="form-label me-2 mb-0">Kategória:</label>
                <InputSelect id="kategoria" class="form-control form-select" @bind-Value="filter.KategoriaId" style="width: 200px">
                    @if (SzobakAll is not null)
                    {
                        <option value="">Összes kategória</option>
                        @foreach (var kat in SzobakAll.Select(sz => sz.KategoriaRef).Distinct().OrderBy(k => k.Megnevezes))
                        {
                            <option value="@kat.Id">@kat.Megnevezes</option>
                        }
                    }
                </InputSelect>
            </div>

            <button type="submit" class="btn btn-success">
                <Icon Type="filter" />
                Szűrés
            </button>
        </EditForm>
        <button class="btn btn-secondary m-1" @onclick="ResetFilters">
            Alaphelyzet
        </button>
    </div>
</div>




@if (Szobak is null || Szobak.Count == 0)
{
    <div class="szoba-item">Nincsenek szobák.</div>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">ID</th>
                <th scope="col">Szobaszám</th>
                <th scope="col">Ágyak száma</th>
                <th scope="col">Kategória</th>
                <th scope="col">Műveletek</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var szoba in Szobak)
            {
                <tr>
                    <th scope="row">@szoba.Id</th>
                    <td>@szoba.SzobaSzam</td>
                    <td>@szoba.AgyakSzama</td>
                    <td>@szoba.KategoriaRef?.Megnevezes</td>
                    <td>
                        <a href="@($"/szobak/modosit/{szoba.Id}")" class="btn btn-secondary">
                            <Icon Type="edit"/>
                        </a>
                        <button type="button" @onclick="() => OpenConfirmPopup(szoba)" class="btn btn-danger">
                            <Icon Type="delete"/>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<DeleteConfirmPopup Visible="ShowDeleteConfirmDialog"
                    ItemName="@(_itemToDelete.SzobaSzam.ToString())"
                    OnCancel="CancelDeleteSzoba"
                    OnConfirm="() => ConfirmDeleteSzoba(_itemToDelete.Id)" />

@code {
    public List<Szoba>? Szobak;
    public List<Szoba>? SzobakAll;
    private bool ShowDeleteConfirmDialog = false;
    private Szoba _itemToDelete = new();
    private SzobaFilter filter = new();

    protected override async Task OnInitializedAsync()
    {
        SzobakAll = await SzobaRepo.ReadAllAsync();
        Szobak = new List<Szoba>(SzobakAll);
    }

    private void OpenConfirmPopup(Szoba Szoba)
    {
        _itemToDelete = Szoba;
        ShowDeleteConfirmDialog = true;
    }

    private void CancelDeleteSzoba()
    {
        ShowDeleteConfirmDialog = false;
    }

    private async Task ConfirmDeleteSzoba(int id)
    {
        await SzobaRepo.DeleteAsync(id);
        Szobak = await SzobaRepo.ReadAllAsync();
        ShowDeleteConfirmDialog = false;
        StateHasChanged();
    }

    private async Task FilterSzobak()
    {
        Szobak = await SzobaRepo.ReadFiltered(filter);
        StateHasChanged();
    }

    private void ResetFilters()
    {
        if (SzobakAll is not null)
        {
            filter.Id = null;
            filter.SzobaSzam = null;
            filter.KategoriaId = null;
            Szobak = new List<Szoba>(SzobakAll);
        }
    }
}
