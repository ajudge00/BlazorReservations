@page "/szobak/uj"
@inject ISzobaRepository SzobaRepo
@inject IValidationService Validation
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>
    Új szoba
</PageTitle>

<a class="btn btn-primary" href="/szobak">
    <Icon Type="return" /> Mégse
</a>

<div class="row justify-content-center mt-5">
    <div class="col-6">
        <EditForm FormName="CreateSzobaForm" Model="Szoba" OnValidSubmit="CreateSzoba" autocomplete="off">
            <h3>Új szoba</h3>
            <div class="mb-3">
                <label for="szobaszam">Szobaszám:</label>
                <InputNumber id="szobaszam" @bind-Value="Szoba.SzobaSzam" class="form-control mb-3" />
                <label for="agyakszama">Ágyak száma:</label>
                <InputNumber id="agyakszama" @bind-Value="Szoba.AgyakSzama" class="form-control mb-3" />
                <label for="kategoria">Kategória</label>
                <InputSelect id="kategoria" class="form-control form-select" @bind-Value="Szoba.KategoriaId" disabled="@KategoriaSelectIsDisabled">
                    @if (KategoriaSelectIsDisabled)
                    {
                        <option disabled selected>Nincsenek kategóriák</option>
                    }
                    else
                    {
                        <option disabled selected value="0">-- Válassz kategóriát --</option>
                        @foreach (var kat in Kategoriak)
                        {
                            <option value="@kat.Id">@kat.Megnevezes</option>
                        }
                    }
                </InputSelect>

            </div>
            <div class="mb-3">
                <button class="btn btn-success">Mentés</button>
            </div>
            <DataAnnotationsValidator />
            <FormWarningsDisplay FormWarnings="FormWarnings"/>
        </EditForm>
    </div>
</div>


@code {
    public Szoba Szoba { get; set; } = new();
    public List<SzobaKategoria> Kategoriak { get; set; } = new();
    public bool KategoriaSelectIsDisabled = true;
    private List<string> FormWarnings = new();

    protected override async Task OnInitializedAsync()
    {
        Kategoriak = await SzobaRepo.ReadKategoriaAllAsync();

        if (Kategoriak is not null && Kategoriak.Count != 0)
        {
            KategoriaSelectIsDisabled = false;
            Szoba.KategoriaId = Kategoriak[0].Id;
        }
    }


    private async Task CreateSzoba()
    {
        FormWarnings = await Validation.IsSzobaValid(Szoba);

        if (!FormWarnings.Any())
        {
            await SzobaRepo.CreateAsync(Szoba);
            Navigation.NavigateTo("/szobak");
        }

        return;
    }
}
