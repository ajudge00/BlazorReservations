@page "/szobak/modosit/{id:int}"
@inject ISzobaRepository SzobaRepo
@inject IValidationService Validation
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>
    Szoba módosítása
</PageTitle>

<a class="btn btn-primary" href="/szobak">
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-return-left" viewBox="0 0 16 16">
        <path fill-rule="evenodd" d="M14.5 1.5a.5.5 0 0 1 .5.5v4.8a2.5 2.5 0 0 1-2.5 2.5H2.707l3.347 3.346a.5.5 0 0 1-.708.708l-4.2-4.2a.5.5 0 0 1 0-.708l4-4a.5.5 0 1 1 .708.708L2.707 8.3H12.5A1.5 1.5 0 0 0 14 6.8V2a.5.5 0 0 1 .5-.5" />
    </svg> Mégse
</a>

<div class="row justify-content-center mt-5">
    <div class="col-6">
        @if (Szoba is not null)
        {
            <EditForm FormName="UpdateSzobaForm" Model="Szoba" OnValidSubmit="UpdateSzoba" autocomplete="off">
                <h3>Szoba módosítása</h3>
                <input type="hidden" name="Szoba.Id" value="@Szoba.Id" />
                <div class="mb-3">
                    <label for="szobaszam">Szobaszám:</label>
                    <InputNumber id="szobaszam" @bind-Value="Szoba.SzobaSzam" class="form-control mb-3" />
                    <label for="agyakszama">Ágyak száma:</label>
                    <InputNumber id="agyakszama" @bind-Value="Szoba.AgyakSzama" class="form-control mb-3" />
                    <label for="kategoria">Kategória</label>
                    <InputSelect id="kategoria" class="form-control form-select" @bind-Value="Szoba.KategoriaId">
                        @foreach (var kat in Kategoriak)
                        {
                            <option value="@kat.Id">@kat.Megnevezes</option>
                        }
                    </InputSelect>
                </div>
                <div class="mb-3">
                    <button class="btn btn-success">Mentés</button>
                </div>
                <DataAnnotationsValidator />
                <FormWarningsDisplay FormWarnings="FormWarnings"/>
            </EditForm>
        }
    </div>
</div>


@code {
    [Parameter]
    public int Id { get; set; }
    public Szoba? Szoba { get; set; }
    public List<SzobaKategoria> Kategoriak { get; set; } = new();
    private List<string> FormWarnings = new();

    protected override async Task OnInitializedAsync()
    {
        Szoba ??= await SzobaRepo.ReadByIdAsync(Id);
        Kategoriak = await SzobaRepo.ReadKategoriaAllAsync();
    }

    private async Task UpdateSzoba()
    {
        FormWarnings = await Validation.IsSzobaValid(Szoba);

        if (!FormWarnings.Any())
        {
            await SzobaRepo.UpdateAsync(Szoba);
            Navigation.NavigateTo("/szobak");
        }

        return;
    }
}
