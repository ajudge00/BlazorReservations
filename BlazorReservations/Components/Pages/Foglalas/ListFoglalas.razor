@page "/foglalasok"
@page "/foglalasok/vendeg/{vendegid:int}"
@inject IFoglalasRepository FoglalasRepo
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>
    Foglalások
</PageTitle>

<div class="d-flex flex-row justify-content-between mb-3" style="min-width: 1500px">
    <div id="left">
        <a class="btn btn-primary mb-3 add-btn" href="/foglalasok/uj">
            <Icon Type="add" />
            Új foglalás
        </a>
    </div>

    <div id="right" class="d-flex flex-row">
        <EditForm FormName="FilterFoglalasForm" Model="filter" OnValidSubmit="FilterFoglalasok" autocomplete="off" class="d-flex flex-row">
            <div id="fields-container" class="d-flex flex-column">
                <div id="field-row-1" class="d-flex flex-row gap-3 justify-content-end">
                    <div class="d-flex align-items-center">
                        <label for="kezdete" class="form-label me-2 mb-0">Intervallum:</label>
                        <InputDate id="kezdete" class="form-control" @bind-Value="filter.Kezdete" />
                        <span class="mx-2 align-self-center">-</span>
                        <InputDate id="vege" class="form-control" @bind-Value="filter.Vege" />
                    </div>
                    <div class="d-flex align-items-center">
                        <label for="ejszakakszama" class="form-label me-2 mb-0">Éjszakák száma:</label>
                        <InputNumber id="ejszakakszama" @bind-Value="filter.EjszakakSzama" class="form-control" style="width: 100px" />
                    </div>
                    <div class="d-flex align-items-center">
                        <label for="szoba" class="form-label me-2 mb-0">Szoba:</label>
                        <InputSelect id="szoba" class="form-control form-select" @bind-Value="filter.SzobaId" style="width: 200px">
                            @if (FoglalasokAll is not null)
                            {
                                <option value="">Összes szoba</option>
                                @foreach (var sz in FoglalasokAll.Select(f => f.SzobaRef).Distinct().OrderBy(sz => sz.SzobaSzam))
                                {
                                    <option value="@sz.Id">@sz.SzobaSzam</option>
                                }
                            }
                        </InputSelect>
                    </div>
                </div>
                <div id="field-row-2" class="d-flex flex-row gap-3 mt-2 justify-content-end">
                    <div class="d-flex align-items-center">
                        <label for="vendeg" class="form-label me-2 mb-0">Vendég:</label>
                        <InputText id="vendeg" @bind-Value="filter.VendegNev" class="form-control" style="width: 200px"/>
                    </div>
                </div>

                <div id="field-row-2" class="d-flex flex-row gap-3 mt-2 justify-content-end">
                    <div class="d-flex align-items-center">
                        <label for="szemelyekszama" class="form-label me-2 mb-0">Plusz személyek:</label>
                        <InputNumber id="szemelyekszama" @bind-Value="filter.SzemelyekSzama" class="form-control" style="max-width: 200px" />
                    </div>
                </div>
            </div>

            <div class="ms-3 align-items-start">
                <button type="submit" class="btn btn-success">
                    <Icon Type="filter" />
                    Szűrés
                </button>
            </div>
        </EditForm>

        <button class="btn btn-secondary ms-3" style="height: 38px" @onclick="ResetFilters">
            Alaphelyzet
        </button>
    </div>
</div>

@if (Foglalasok is null || Foglalasok.Count == 0)
{
    <div class="foglalas-item">Nincsenek foglalások.</div>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">ID</th>
                <th scope="col">Kezdete</th>
                <th scope="col">Vége</th>
                <th scope="col">Éjszakák száma</th>
                <th scope="col">Vendég</th>
                <th scope="col">Szoba</th>
                <th scope="col">Plusz személyek száma</th>
                <th scope="col">Műveletek</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var foglalas in Foglalasok)
            {
                <tr>
                    <th scope="row">@foglalas.Id</th>
                    <td>@(foglalas.Kezdete.ToString("yyyy.MM.dd. hh:mm"))</td>
                    <td>@(GetFoglalasVege(foglalas.Kezdete, foglalas.EjszakakSzama).ToString("yyyy.MM.dd. hh:mm"))</td>
                    <td>@foglalas.EjszakakSzama</td>
                    <td>@foglalas.VendegRef?.Nev</td>
                    <td>@foglalas.SzobaRef?.SzobaSzam</td>
                    <td>@foglalas.SzemelyekSzama</td>
                    <td>
                        <a href="@($"/foglalasok/{foglalas.Id}")" class="btn btn-primary">
                            <Icon Type="info" />
                        </a>
                        <a href="@($"/foglalasok/modosit/{foglalas.Id}")" class="btn btn-secondary">
                            <Icon Type="edit"/>
                        </a>
                        <button type="button" @onclick="() => OpenConfirmPopup(foglalas)" class="btn btn-danger">
                            <Icon Type="delete"/>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<DeleteConfirmPopup Visible="ShowDeleteConfirmDialog"
                    ItemName="@(_itemToDelete.Id.ToString())"
                    OnCancel="CancelDeleteFoglalas"
                    OnConfirm="() => ConfirmDeleteFoglalas(_itemToDelete.Id)" />

@code {
    public List<Foglalas>? Foglalasok;
    public List<Foglalas>? FoglalasokAll;
    private bool ShowDeleteConfirmDialog = false;
    private Foglalas _itemToDelete = new();
    private FoglalasFilter filter = new();

    [Parameter]
    public int? VendegId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        FoglalasokAll = await FoglalasRepo.ReadAllAsync();
        Foglalasok = new List<Foglalas>(FoglalasokAll);
    }

    private void OpenConfirmPopup(Foglalas foglalas)
    {
        _itemToDelete = foglalas;
        ShowDeleteConfirmDialog = true;
    }

    private void CancelDeleteFoglalas()
    {
        ShowDeleteConfirmDialog = false;
    }

    private async Task ConfirmDeleteFoglalas(int id)
    {
        await FoglalasRepo.DeleteAsync(id);
        Foglalasok = await FoglalasRepo.ReadAllAsync();
        ShowDeleteConfirmDialog = false;
        StateHasChanged();
    }

    private DateTime GetFoglalasVege(DateTime kezdete, int ejszakakSzama)
    {
        return new DateTime(
            kezdete.Year,
            kezdete.Month,
            kezdete.Day + ejszakakSzama,
            11,
            0,
            0
        );
    }

    private async Task FilterFoglalasok()
    {
        Foglalasok = await FoglalasRepo.ReadFiltered(filter);
        StateHasChanged();
    }

    private void ResetFilters()
    {
        if (FoglalasokAll is not null)
        {
            filter = new();
            Foglalasok = new List<Foglalas>(FoglalasokAll);
        }
    }
}
