@page "/vendegek"
@inject IVendegRepository VendegRepo
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>
    Vendégek
</PageTitle>


<div class="d-flex justify-content-between align-items-center mb-3">
    <div class="me-3">
        <a class="btn btn-primary add-btn" href="/vendegek/uj">
            <Icon Type="add"/>
            Új vendég
        </a>
    </div>

    <div class="d-flex align-items-center">
        <EditForm FormName="FilterVendegForm" Model="filter" OnValidSubmit="FilterVendegek" autocomplete="off" class="d-flex flex-wrap align-items-center gap-3">
            <div class="d-flex align-items-center">
                <label for="nev" class="form-label me-2 mb-0">Név:</label>
                <InputText id="nev" class="form-control form-text" @bind-Value="filter.Nev" style="width: 200px"/>
            </div>

            <div class="d-flex align-items-center">
                <label for="szuletett" class="form-label me-2 mb-0">Született:</label>
                <InputDate id="szuletett" @bind-Value="filter.Szuletett" class="form-control" style="width: 150px" />
            </div>

            <button type="submit" class="btn btn-success">
                <Icon Type="filter"/>
                Szűrés
            </button>
        </EditForm>
        <button class="btn btn-secondary m-1" @onclick="ResetFilters">
            Alaphelyzet
        </button>
    </div>
</div>

@if(Vendegek is null || Vendegek.Count() == 0)
{
    <div class="vendeg-item">Nincsenek vendégek.</div>
} else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">ID</th>
                <th scope="col">Név</th>
                <th scope="col">Születési dátum</th>
                <th scope="col">Műveletek</th>
            </tr>
        </thead>
        <tbody>
        @foreach(var vendeg in Vendegek)
        {
            <tr>
                <th scope="row">@vendeg.Id</th>
                <td>@vendeg.Nev</td>
                <td>@vendeg.Szuletett</td>
                <td>
                    <a href="@($"/foglalasok/vendeg/{vendeg.Id}")" class="btn btn-secondary">Vendég foglalásai</a>
                    <a href="@($"/vendegek/modosit/{vendeg.Id}")" class="btn btn-secondary">
                        <Icon Type="edit" />
                    </a>
                    <button type="button" @onclick="() => OpenConfirmPopup(vendeg)" class="btn btn-danger">
                        <Icon Type="delete" />
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

<DeleteConfirmPopup Visible="ShowDeleteConfirmDialog"
                    ItemName="@_itemToDelete.Nev"
                    OnCancel="CancelDeleteVendeg"
                    OnConfirm="() => ConfirmDeleteVendeg(_itemToDelete.Id)" />

@code {
    public List<Vendeg>? Vendegek;
    public List<Vendeg>? VendegekAll;
    private bool ShowDeleteConfirmDialog = false;
    private Vendeg _itemToDelete = new();
    private VendegFilter filter = new();

    protected override async Task OnInitializedAsync()
    {
        VendegekAll = await VendegRepo.ReadAllAsync();
        Vendegek = new List<Vendeg>(VendegekAll);
    }

    private void OpenConfirmPopup(Vendeg vendeg)
    {
        _itemToDelete = vendeg;
        ShowDeleteConfirmDialog = true;
    }

    private void CancelDeleteVendeg()
    {
        ShowDeleteConfirmDialog = false;
    }

    private async Task ConfirmDeleteVendeg(int id)
    {
        await VendegRepo.DeleteAsync(id);
        Vendegek = await VendegRepo.ReadAllAsync();
        ShowDeleteConfirmDialog = false;
        StateHasChanged();
    }

    private async Task FilterVendegek()
    {
        Vendegek = await VendegRepo.ReadFiltered(filter);
        StateHasChanged();
    }

    private void ResetFilters()
    {
        if(VendegekAll is not null)
        {
            filter = new();
            Vendegek = new List<Vendeg>(VendegekAll);
        }
    }
}
